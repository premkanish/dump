# Multi-stage build for trading engine
# Using Rust 1.82+ for edition 2024 support

ARG RUST_VERSION=1.82
FROM rust:${RUST_VERSION}-slim as builder

WORKDIR /app

# Install build dependencies
RUN apt-get update && apt-get install -y \
    pkg-config \
    libssl-dev \
    libdbus-1-dev \
    cmake \
    g++ \
    && rm -rf /var/lib/apt/lists/*

# Copy manifests first for better layer caching
COPY Cargo.toml Cargo.lock ./
COPY .cargo ./.cargo

# Copy all crates
COPY crates ./crates
COPY apps ./apps

# Build release binary with optimizations
ENV CARGO_INCREMENTAL=0
ENV RUSTFLAGS="-C target-cpu=native -C opt-level=3"

RUN cargo build --release -p engine && \
    strip target/release/engine

# Runtime stage - minimal image
FROM debian:bookworm-slim

# Install runtime dependencies only
RUN apt-get update && apt-get install -y \
    ca-certificates \
    libssl3 \
    libdbus-1-3 \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Create non-root user
RUN useradd -m -u 1000 -s /bin/bash hft && \
    mkdir -p /app/data /app/models /app/logs && \
    chown -R hft:hft /app

WORKDIR /app

# Copy binary from builder
COPY --from=builder --chown=hft:hft /app/target/release/engine /usr/local/bin/engine

# Copy config templates
COPY --chown=hft:hft config /app/config

# Create models directory structure
RUN mkdir -p /app/models/crypto /app/models/equity && \
    chown -R hft:hft /app/models

USER hft

# Expose ports
EXPOSE 8081 9090

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD curl -f http://localhost:8081/health || exit 1

# Set environment
ENV RUST_LOG=info
ENV RUST_BACKTRACE=1

# Run the engine
CMD ["engine"]
