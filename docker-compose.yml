version: '3.9'

services:
  engine:
    build:
      context: .
      dockerfile: Dockerfile.engine
      args:
        RUST_VERSION: "1.82"
    image: hft-engine:latest
    container_name: hft-engine
    restart: unless-stopped
    ports:
      - "8081:8081"  # WebSocket
      - "9090:9090"  # Prometheus metrics
    volumes:
      - ./config:/app/config:ro
      - ./models:/app/models:ro
      - ./data:/app/data
      - engine-logs:/var/log/hft
    env_file:
      - .env
    environment:
      - RUST_LOG=info
      - RUST_BACKTRACE=1
    networks:
      - hft-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 8G
        reservations:
          cpus: '2'
          memory: 4G
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"

  prometheus:
    image: prom/prometheus:latest
    container_name: hft-prometheus
    restart: unless-stopped
    ports:
      - "9091:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    networks:
      - hft-network
    depends_on:
      - engine

  grafana:
    image: grafana/grafana:latest
    container_name: hft-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./config/grafana:/etc/grafana/provisioning:ro
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_ROOT_URL=http://localhost:3000
      - GF_INSTALL_PLUGINS=grafana-clock-panel
    networks:
      - hft-network
    depends_on:
      - prometheus

  # PostgreSQL for historical data (optional)
  postgres:
    image: postgres:16-alpine
    container_name: hft-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=hft_db
      - POSTGRES_USER=hft_user
      - POSTGRES_PASSWORD=hft_password
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - hft-network
    profiles:
      - with-db

  # NATS message bus (optional)
  nats:
    image: nats:latest
    container_name: hft-nats
    restart: unless-stopped
    ports:
      - "4222:4222"  # Client connections
      - "8222:8222"  # HTTP monitoring
      - "6222:6222"  # Cluster routing
    command:
      - "-js"  # Enable JetStream
      - "-m"   # Enable monitoring
      - "8222"
    volumes:
      - nats-data:/data
    networks:
      - hft-network
    profiles:
      - with-nats

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: hft-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --maxmemory 2gb --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
    networks:
      - hft-network
    profiles:
      - with-cache

volumes:
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  postgres-data:
    driver: local
  nats-data:
    driver: local
  redis-data:
    driver: local
  engine-logs:
    driver: local

networks:
  hft-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
